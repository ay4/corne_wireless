/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        behaviors {
          skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
      };
    };
 
        keymap {
                compatible = "zmk,keymap";               default_layer {
// -----------------------------------------------------------------------------------------
// | TAB        |  B    |  Y    |  O    |  U    |      |   |       |  L     |  D    |  W    |  Z    |            |
// | CTRL/ESC   |  C    |  I    |  E    |  A    |      |   |  V    |  H     |  T    |  S    |  N    |  Q         |
// | STICK SHFT |  G    |  X    |  J    |  K    |      |   |       |  R     |  M    |  F    |  P    | STICK SHFT |
//                             | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp  TAB       &kp B  &kp Y  &kp O &kp U   &none         &none   &kp L    &kp D  &kp W  &kp Z   &none
   &mt  LCTRL ESC &kp C  &kp I  &kp E &kp A   &none         &kp V   &kp H    &kp T  &kp S  &kp N   &kp Q
   &skq LSHFT     &kp G  &kp X  &kp J &kp K   &none         &none   &kp R    &kp M  &kp F  &kp P   &skq LSHFT
                 &mt LALT UP &mt LGUI DOWN &lt 2 SPACE     &kp BSPC &kp LEFT &kp RIGHT
                        >;
                };
                                russian_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Б  |  Ы  |   О  |  У  |  Э  |   |  Ц  |  Л  |  Д  |  З  |  Ъ  | BKSP |
// | BTCLR|  Ч  |  И  |   Е  |  А  |  Й  |   |  В  |  Ь  |  Т  |  С  |  Н  |  Ю   |
// | SHFT |  Г  |  Ш  |   Ж  |  К  |  Щ  |   |  Х  |  Р  |  М  |  Ф  |  П  |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp COMMA &kp S   &kp J     &kp E  &kp APOS    &kp W    &kp K  &kp L &kp P  &kp RBKT &kp BSPC
   &bt BT_CLR &kp X     &kp B   &kp T     &kp F  &kp Q       &kp D    &kp M  &kp N &kp C  &kp Y    &kp GT
   &kp LSHFT  &kp U     &kp I   &kp SEMI  &kp R  &kp O       &kp LBKT &kp H  &kp V &kp A  &kp G    &trans
                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// | ____ |  $  |  _  |  [  | XXX   | XXX  |   |   / |  !   |  ]  |  *  |  %  | ____  |
// | ____ |  @  |  -- |  (  |  ,    |  ;   |   |  :  |  .   |  )  |  -- |  &  | ____  |
// | ____ |  =  |  <  |  {  |  '    |  "   |   |   ~ |  ?   |  }  |  >  |  =  | ____  |
//                             | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &trans  &kp DLLR  &kp UNDER &kp LBKT &none      &none       &kp FSLH   &kp EXCL   &kp RBKT  &kp STAR &kp PRCNT   &trans
   &trans  &kp AT    &none     &kp LPAR &kp COMMA  &kp SEMI    &kp COLON  &kp DOT    &kp RPAR  &none    &kp AMPS    &trans
   &trans  &kp EQUAL &kp LT    &kp LBRC &kp APOS   &kp DQT     &kp TILDE  &kp QMARK  &kp RBRC  &kp GT   &kp EQUAL   &trans
                                                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// | ____ |  ____  |  ← TAB |  ↑  | TAB → |  ___  |   | ___ | ← ⌘⇧ | ⌥ ↑ | ⇧⌘ →| ___ | BKSP |
// | ____ |  ____  |  ← ⌥   |  ↓  | ⌥ →   |  ___  |   | ___ | ← ⌥⇧ | ⌥ ↓ | ⌥⇧ →| ___ | ___  |
// | ____ |  ____  |  ____  | ___ | ___   |  ___  |   | ___ | ___  | ___ | ___ | ___ | ___  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans  &trans  &kp LCMD(LS(LBKT)) &kp UP   &kp LCMD(LS(RBKT))  &trans     &trans &kp LCMD(LS(LEFT)) &kp LA(UP)   &kp LCMD(LS(RIGHT))  &trans  &trans
   &trans  &trans  &kp LA(LEFT)       &kp DOWN &kp LA(RIGHT)       &trans     &trans &kp LALT(LS(LEFT)) &kp LA(DOWN) &kp LALT(LS(RIGHT))  &trans  &trans
   &trans  &trans  &trans             &trans   &trans              &trans     &trans &trans             &trans       &trans               &trans  &trans
                                           &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
